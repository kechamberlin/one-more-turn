"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _negate2 = _interopRequireDefault(require("lodash/negate"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _default2 = _interopRequireDefault(require("part:@sanity/components/menus/default"));

var _moreVertIcon = _interopRequireDefault(require("part:@sanity/base/more-vert-icon"));

var _router = require("part:@sanity/base/router");

var _default3 = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _intent = _interopRequireDefault(require("part:@sanity/components/buttons/intent"));

var _tabPanel = _interopRequireDefault(require("part:@sanity/components/tabs/tab-panel"));

var _scrollContainer = _interopRequireDefault(require("part:@sanity/components/utilities/scroll-container"));

var _reactTippy = require("react-tippy");

var _structureBuilder = _interopRequireDefault(require("@sanity/base/structure-builder"));

var _Styleable = _interopRequireDefault(require("../utilities/Styleable"));

var _DefaultPane = _interopRequireDefault(require("./styles/DefaultPane.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function getActionKey(action, index) {
  return (typeof action.action === 'string' ? action.action + action.title : action.title) || index;
}

function noActionFn() {
  // eslint-disable-next-line no-console
  console.warn('No handler defined for action');
}

var noop = () => {
  /* intentional noop */
};

var isActionButton = item => item.showAsAction;

var isMenuButton = (0, _negate2.default)(isActionButton);

function toChildNodeArray(nodes) {
  var arr = Array.isArray(nodes) ? nodes : [nodes];
  return arr.filter(x => x !== undefined && x !== null && x !== false);
}

class Pane extends _react.default.PureComponent {
  constructor(props) {
    super(props);

    _defineProperty(this, "actionHandlers", {});

    _defineProperty(this, "scrollFrameId", null);

    _defineProperty(this, "handleCloseMenu", () => {
      this.setState({
        isMenuOpen: false
      });
    });

    _defineProperty(this, "handleToggleMenu", () => {
      this.setState(prevState => ({
        isMenuOpen: !prevState.isMenuOpen
      }));
    });

    _defineProperty(this, "handleToggleInitialValueTemplateMenu", () => {
      this.setState(prevState => ({
        isInitialValueMenuOpen: !prevState.isInitialValueMenuOpen
      }));
    });

    _defineProperty(this, "handleRootClick", event => {
      var _this$props = this.props,
          onExpand = _this$props.onExpand,
          isCollapsed = _this$props.isCollapsed,
          index = _this$props.index;

      if (isCollapsed && onExpand) {
        onExpand(index);
      }
    });

    _defineProperty(this, "handleTitleClick", event => {
      var _this$props2 = this.props,
          onCollapse = _this$props2.onCollapse,
          isCollapsed = _this$props2.isCollapsed,
          index = _this$props2.index;

      if (!isCollapsed && onCollapse) {
        onCollapse(index);
      }
    });

    _defineProperty(this, "handleMenuAction", item => {
      this.handleCloseMenu();

      if (typeof item.action === 'function') {
        item.action(item.params);
        return;
      }

      var actionHandled = this.props.onAction(item);

      if (actionHandled) {
        return;
      }

      var handler = this.actionHandlers[item.action] || noActionFn;
      handler(item.params, this);
    });

    _defineProperty(this, "renderIntentAction", (action, i) => {
      var styles = this.props.styles;
      return /*#__PURE__*/_react.default.createElement(_intent.default, {
        className: styles.actionButton,
        icon: action.icon,
        intent: action.intent.type,
        key: getActionKey(action, i),
        kind: "simple",
        padding: "small",
        params: action.intent.params,
        title: action.title
      });
    });

    _defineProperty(this, "renderActionMenuItem", item => {
      var styles = this.props.styles;

      if (!item) {
        return null;
      }

      var params = item.intent.params;
      var Icon = item.icon;
      return /*#__PURE__*/_react.default.createElement(_router.IntentLink, {
        className: styles.initialValueTemplateMenuItem,
        intent: "create",
        params: params
      }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("div", null, item.title), /*#__PURE__*/_react.default.createElement("div", {
        className: styles.initialValueTemplateSubtitle
      }, params.type)), /*#__PURE__*/_react.default.createElement("div", {
        className: styles.initialValueTemplateMenuItemIcon
      }, /*#__PURE__*/_react.default.createElement(Icon, null)));
    });

    _defineProperty(this, "renderAction", (action, i) => {
      if (action.intent) {
        return this.renderIntentAction(action, i);
      }

      var _this$props3 = this.props,
          styles = _this$props3.styles,
          initialValueTemplates = _this$props3.initialValueTemplates;

      var items = _structureBuilder.default.menuItemsFromInitialValueTemplateItems(initialValueTemplates);

      var Icon = action.icon;
      return /*#__PURE__*/_react.default.createElement("div", {
        className: styles.menuWrapper,
        key: getActionKey(action, i)
      }, action.action !== 'toggleTemplateSelectionMenu' && /*#__PURE__*/_react.default.createElement(_default3.default, {
        "data-menu-button-id": this.templateMenuId,
        icon: Icon,
        kind: "simple",
        padding: "small",
        title: action.title // eslint-disable-next-line react/jsx-no-bind
        ,
        onClick: this.handleMenuAction.bind(this, action)
      }), action.action === 'toggleTemplateSelectionMenu' && /*#__PURE__*/_react.default.createElement(_reactTippy.Tooltip, {
        arrow: true,
        className: styles.initialValueMenuTooltip,
        distance: 13,
        theme: "light",
        trigger: "click focus",
        position: "bottom",
        interactive: true,
        open: this.state.isInitialValueMenuOpen,
        onRequestClose: this.handleToggleInitialValueTemplateMenu,
        useContext: true,
        html: /*#__PURE__*/_react.default.createElement("div", {
          className: styles.initialValueTemplateMenu
        }, items.map(item => this.renderActionMenuItem(item)))
      }, /*#__PURE__*/_react.default.createElement(_default3.default, {
        "aria-label": "Menu",
        "aria-haspopup": "menu",
        "aria-expanded": this.state.isInitialValueMenuOpen,
        "aria-controls": this.templateMenuId,
        icon: Icon,
        kind: "simple",
        onClick: this.handleToggleInitialValueTemplateMenu,
        padding: "small",
        selected: this.state.isInitialValueMenuOpen,
        title: "Create new document"
      })));
    });

    this.state = {
      isMenuOpen: false,
      isInitialValueMenuOpen: false
    }; // Passed to rendered <Menu> components. This prevents the "click outside"
    // functionality from kicking in when pressing the toggle menu button

    this.templateMenuId = Math.random().toString(36).substr(2, 6);
    this.paneMenuId = Math.random().toString(36).substr(2, 6);
  } // Triggered by clicking "outside" of the menu when open, or after triggering action


  renderActionNodes() {
    var _this$props4 = this.props,
        isCollapsed = _this$props4.isCollapsed,
        menuItems = _this$props4.menuItems,
        renderActions = _this$props4.renderActions;
    var actions = menuItems.filter(action => action.showAsAction && (!isCollapsed || action.showAsAction.whenCollapsed));

    if (renderActions) {
      return renderActions(actions);
    }

    return actions.map(this.renderAction);
  }

  renderHeaderToolsOverflowMenu() {
    var _this$props5 = this.props,
        styles = _this$props5.styles,
        menuItems = _this$props5.menuItems,
        menuItemGroups = _this$props5.menuItemGroups,
        isCollapsed = _this$props5.isCollapsed;
    var items = menuItems.filter(isMenuButton);
    var isMenuOpen = this.state.isMenuOpen;

    if (items.length === 0) {
      return null;
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      className: styles.headerToolContainer
    }, /*#__PURE__*/_react.default.createElement(_reactTippy.Tooltip, {
      arrow: true,
      distance: 13,
      theme: "light",
      trigger: "click focus",
      position: "bottom",
      interactive: true,
      open: isMenuOpen,
      onRequestClose: this.handleCloseMenu,
      useContext: true,
      html: /*#__PURE__*/_react.default.createElement(_default2.default, {
        id: this.paneMenuId,
        items: items,
        groups: menuItemGroups,
        origin: isCollapsed ? 'top-left' : 'top-right',
        onAction: this.handleMenuAction,
        onClose: this.handleCloseMenu,
        onClickOutside: this.handleCloseMenu
      })
    }, /*#__PURE__*/_react.default.createElement(_default3.default, {
      "aria-label": "Menu",
      "aria-haspopup": "menu",
      "aria-expanded": isMenuOpen,
      "aria-controls": this.paneMenuId,
      className: styles.menuOverflowButton,
      icon: _moreVertIcon.default,
      kind: "simple",
      onClick: this.handleToggleMenu,
      padding: "small",
      selected: isMenuOpen,
      title: "Show menu"
    })));
  }

  renderHeaderTools() {
    var styles = this.props.styles;
    var headerActionNodes = toChildNodeArray(this.renderActionNodes());
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, headerActionNodes.map((actionNode, actionNodeIndex) =>
    /*#__PURE__*/
    // eslint-disable-next-line react/no-array-index-key
    _react.default.createElement("div", {
      key: actionNodeIndex,
      className: styles.headerToolContainer
    }, actionNode)), this.renderHeaderToolsOverflowMenu());
  } // eslint-disable-next-line complexity


  render() {
    var _this$props6 = this.props,
        title = _this$props6.title,
        children = _this$props6.children,
        hasTabs = _this$props6.hasTabs,
        isSelected = _this$props6.isSelected,
        isCollapsed = _this$props6.isCollapsed,
        isScrollable = _this$props6.isScrollable,
        hasSiblings = _this$props6.hasSiblings,
        styles = _this$props6.styles,
        footer = _this$props6.footer,
        tabIdPrefix = _this$props6.tabIdPrefix,
        viewId = _this$props6.viewId;
    var mainChildren = isScrollable ? /*#__PURE__*/_react.default.createElement(_scrollContainer.default, {
      className: styles.scrollContainer,
      tabIndex: -1
    }, children) : /*#__PURE__*/_react.default.createElement("div", {
      className: styles.notScrollable
    }, children);
    var headerViewMenuNode = this.props.renderHeaderViewMenu();
    return /*#__PURE__*/_react.default.createElement("div", {
      className: (0, _classnames.default)([styles.root, isCollapsed && styles.isCollapsed, isSelected ? styles.isActive : styles.isDisabled]),
      onClick: this.handleRootClick
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: styles.header
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: styles.headerContent
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: styles.titleContainer
    }, /*#__PURE__*/_react.default.createElement("h2", {
      className: styles.title,
      onClick: this.handleTitleClick
    }, title)), /*#__PURE__*/_react.default.createElement("div", {
      className: styles.headerTools
    }, this.renderHeaderTools())), headerViewMenuNode && /*#__PURE__*/_react.default.createElement("div", {
      className: styles.headerViewMenu
    }, headerViewMenuNode)), hasTabs ? /*#__PURE__*/_react.default.createElement(_tabPanel.default, {
      "aria-labelledby": "".concat(tabIdPrefix, "tab-").concat(viewId),
      className: styles.main,
      id: "".concat(tabIdPrefix, "tabpanel"),
      role: "tabpanel"
    }, mainChildren) : /*#__PURE__*/_react.default.createElement("div", {
      className: styles.main
    }, mainChildren), footer && /*#__PURE__*/_react.default.createElement("div", {
      className: hasTabs && hasSiblings ? styles.hoverFooter : styles.stickyFooter
    }, footer));
  }

}

_defineProperty(Pane, "propTypes", {
  hasTabs: _propTypes.default.bool,
  tabIdPrefix: _propTypes.default.string,
  viewId: _propTypes.default.string,
  title: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),
  isCollapsed: _propTypes.default.bool,
  onExpand: _propTypes.default.func,
  onCollapse: _propTypes.default.func,
  children: _propTypes.default.node,
  isSelected: _propTypes.default.bool,
  isScrollable: _propTypes.default.bool,
  hasSiblings: _propTypes.default.bool,
  onAction: _propTypes.default.func,
  renderActions: _propTypes.default.func,
  menuItems: _propTypes.default.arrayOf(_propTypes.default.shape({
    showAsAction: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.shape({
      whenCollapsed: _propTypes.default.bool
    })])
  })),
  menuItemGroups: _propTypes.default.arrayOf(_propTypes.default.shape({
    id: _propTypes.default.string.isRequired,
    title: _propTypes.default.string
  })),
  initialValueTemplates: _propTypes.default.arrayOf(_propTypes.default.shape({
    templateId: _propTypes.default.string,
    parameters: _propTypes.default.object // eslint-disable-line react/forbid-prop-types

  })),
  index: _propTypes.default.number,
  footer: _propTypes.default.node,
  renderHeaderViewMenu: _propTypes.default.func,
  styles: _propTypes.default.object // eslint-disable-line react/forbid-prop-types

});

_defineProperty(Pane, "defaultProps", {
  index: 0,
  footer: undefined,
  hasTabs: false,
  tabIdPrefix: undefined,
  viewId: undefined,
  title: 'Untitled',
  hasSiblings: false,
  isCollapsed: false,
  isSelected: false,
  isScrollable: true,
  renderActions: undefined,
  styles: {},
  children: /*#__PURE__*/_react.default.createElement("div", null),
  onAction: noop,
  menuItems: [],
  menuItemGroups: [],
  initialValueTemplates: [],
  renderHeaderViewMenu: () => null
});

var _default = (0, _Styleable.default)(Pane, _DefaultPane.default);

exports.default = _default;