"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PopoverStory = PopoverStory;

var _range2 = _interopRequireDefault(require("lodash/range"));

var _chance = _interopRequireDefault(require("chance"));

var _actions = require("part:@sanity/storybook/addons/actions");

var _knobs = require("part:@sanity/storybook/addons/knobs");

var _content = _interopRequireDefault(require("part:@sanity/components/dialogs/content"));

var _confirm = _interopRequireDefault(require("part:@sanity/components/dialogs/confirm"));

var _sanity = _interopRequireDefault(require("part:@sanity/storybook/addons/sanity"));

var _popover = _interopRequireDefault(require("part:@sanity/components/dialogs/popover"));

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var chance = new _chance.default();
var dialogTestContent = {
  minimal: 'minimal',
  paragraph: 'paragraph',
  longtext: 'longtext',
  example: 'example with dialogcontent'
};
var paragraph = chance.paragraph();
var paragraphs = (0, _range2.default)(0, 20).map(i => /*#__PURE__*/_react.default.createElement("p", {
  key: i
}, chance.paragraph()));

function renderContent(type) {
  switch (type) {
    case 'paragraph':
      return /*#__PURE__*/_react.default.createElement("p", null, paragraph);

    case 'longtext':
      return /*#__PURE__*/_react.default.createElement("div", null, paragraphs);

    case 'example':
      return /*#__PURE__*/_react.default.createElement(_content.default, {
        size: "medium",
        padding: "medium"
      }, /*#__PURE__*/_react.default.createElement("h1", null, "With dialog content"), /*#__PURE__*/_react.default.createElement("p", null, paragraph));

    default:
      return 'Minimal';
  }
}

function PopoverStory() {
  var actions = [{
    index: '1',
    color: 'success',
    title: 'Please click me',
    autoFocus: true
  }];
  var percentRange = {
    range: true,
    min: 0,
    max: 100,
    step: 0.1
  };
  var sizeRange = {
    range: true,
    min: 0,
    max: 1000,
    step: 1
  };
  var left = (0, _knobs.number)('Reference left', 50, percentRange, 'test');
  var top = (0, _knobs.number)('Reference top', 50, percentRange, 'test');
  var width = (0, _knobs.number)('Reference width', 150, sizeRange, 'test');
  var height = (0, _knobs.number)('Reference height', 150, sizeRange, 'test');
  var placement = (0, _knobs.select)('Placement', ['auto', 'top', 'right', 'bottom', 'left', 'auto-start', 'top-start', 'right-start', 'bottom-start', 'left-start', 'auto-end', 'top-end', 'right-end', 'bottom-end', 'left-end'], 'auto', 'props');
  var refStyles = {
    position: 'absolute',
    top: "".concat(top, "%"),
    left: "".concat(left, "%"),
    width: "".concat(width, "px"),
    height: "".concat(height, "px"),
    backgroundColor: 'lime'
  };
  var contentTest = (0, _knobs.select)('content', dialogTestContent, 'minimal');

  if (window) {
    // Triggers update of popper.js (only reacts to scroll and resize by default)
    var event = document.createEvent('HTMLEvents');
    event.initEvent('resize', true, false);
    window.dispatchEvent(event);
  }

  return /*#__PURE__*/_react.default.createElement(_sanity.default, {
    part: "part:@sanity/components/dialogs/confirm",
    propTables: [_confirm.default]
  }, /*#__PURE__*/_react.default.createElement("div", {
    style: refStyles
  }, /*#__PURE__*/_react.default.createElement(_popover.default, {
    actions: (0, _knobs.boolean)('has actions', false, 'test') ? actions : [],
    color: (0, _knobs.select)('color', [undefined, 'danger', 'default'], undefined, 'props'),
    title: (0, _knobs.text)('Title', 'Title', 'props'),
    padding: (0, _knobs.select)('Padding', [undefined, 'none', 'small', 'medium', 'large'], undefined, 'props'),
    onClose: (0, _knobs.boolean)('Has onClose', false, 'test') ? (0, _actions.action)('onClose') : undefined,
    placement: placement
  }, contentTest && renderContent(contentTest)), "Reference element"));
}