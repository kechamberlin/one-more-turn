"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createButtonLike;

var _classnames = _interopRequireDefault(require("classnames"));

var _defaultStyle = _interopRequireDefault(require("part:@sanity/components/buttons/default-style"));

var _spinner = _interopRequireDefault(require("part:@sanity/components/loading/spinner"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function createButtonLike(Component, _ref) {
  var _class, _temp;

  var displayName = _ref.displayName,
      _ref$defaultProps = _ref.defaultProps,
      defaultProps = _ref$defaultProps === void 0 ? {} : _ref$defaultProps;
  return _temp = _class = class ButtonLike extends _react.default.Component {
    constructor() {
      super(...arguments);

      _defineProperty(this, "state", {
        focusSetFromOutside: null
      });

      _defineProperty(this, "setRootElement", el => {
        this._element = el;
      });

      _defineProperty(this, "handleBlur", event => {
        this.setState({
          triggeredFocus: undefined
        }); // eslint-disable-next-line react/prop-types

        if (this.props.onBlur) {
          this.props.onBlur(event);
        }
      });

      _defineProperty(this, "handleInnerBlur", () => {
        this.setState({
          focusSetFromOutside: undefined
        });
      });
    }

    focus() {
      if (this._element.focus) {
        this.setState({
          focusSetFromOutside: true
        });

        this._element.focus();
      }
    }

    render() {
      var _this$props = this.props,
          kind = _this$props.kind,
          inverted = _this$props.inverted,
          color = _this$props.color,
          Icon = _this$props.icon,
          loading = _this$props.loading,
          className = _this$props.className,
          children = _this$props.children,
          disabled = _this$props.disabled,
          padding = _this$props.padding,
          bleed = _this$props.bleed,
          selected = _this$props.selected,
          rest = _objectWithoutProperties(_this$props, ["kind", "inverted", "color", "icon", "loading", "className", "children", "disabled", "padding", "bleed", "selected"]);

      var style = (0, _classnames.default)(className, [_defaultStyle.default.root, _defaultStyle.default[kind], _defaultStyle.default["padding_".concat(padding)], inverted && _defaultStyle.default.inverted, color && _defaultStyle.default["color__".concat(color)], bleed && _defaultStyle.default.bleed, disabled && _defaultStyle.default.disabled, selected && _defaultStyle.default.selected, loading && _defaultStyle.default.loading]);
      return /*#__PURE__*/_react.default.createElement(Component, _extends({}, rest, {
        className: style,
        disabled: disabled || loading,
        ref: this.setRootElement,
        tabIndex: 0,
        onBlur: this.handleBlur
      }), /*#__PURE__*/_react.default.createElement("span", {
        className: _defaultStyle.default.inner,
        tabIndex: this.state.focusSetFromOutside ? undefined : -1,
        onBlur: this.handleInnerBlur
      }, /*#__PURE__*/_react.default.createElement("span", {
        className: _defaultStyle.default.content
      }, loading && /*#__PURE__*/_react.default.createElement("span", {
        className: _defaultStyle.default.spinner
      }, /*#__PURE__*/_react.default.createElement(_spinner.default, {
        inline: true
      })), Icon && /*#__PURE__*/_react.default.createElement("div", {
        className: _defaultStyle.default.icon
      }, /*#__PURE__*/_react.default.createElement(Icon, null)), children && /*#__PURE__*/_react.default.createElement("span", {
        className: _defaultStyle.default.text
      }, children))));
    }

  }, _defineProperty(_class, "displayName", displayName || "ButtonLike(".concat(typeof Component === 'string' ? Component : Component.displayName || Component.name, ")")), _defineProperty(_class, "propTypes", {
    kind: _propTypes.default.oneOf(['simple', 'secondary']),
    color: _propTypes.default.oneOf(['primary', 'success', 'danger', 'white', 'warning']),
    onBlur: _propTypes.default.func,
    onClick: _propTypes.default.func,
    children: _propTypes.default.node,
    inverted: _propTypes.default.bool,
    icon: _propTypes.default.func,
    loading: _propTypes.default.bool,
    className: _propTypes.default.string,
    disabled: _propTypes.default.bool,
    tabIndex: _propTypes.default.number,
    padding: _propTypes.default.oneOf(['large', 'default', 'small', 'none']),
    bleed: _propTypes.default.bool,
    selected: _propTypes.default.bool
  }), _defineProperty(_class, "defaultProps", _objectSpread({
    icon: null,

    onClick() {},

    kind: undefined,
    bleed: false,
    padding: 'default',
    selected: false
  }, defaultProps)), _temp;
}