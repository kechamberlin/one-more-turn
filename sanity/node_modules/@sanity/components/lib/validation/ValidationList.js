"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _ValidationListItem = _interopRequireDefault(require("./ValidationListItem"));

var _ValidationList = _interopRequireDefault(require("./ValidationList.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ValidationList extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "scrollTimeout", void 0);

    _defineProperty(this, "handleClick", (event, path) => {
      var _this$props = this.props,
          onFocus = _this$props.onFocus,
          onClose = _this$props.onClose;
      var pathString = path[0];
      var element = document.querySelector("[data-focus-path=\"".concat(pathString, "\"]"));

      if (element) {
        element.scrollIntoView({
          behavior: 'smooth',
          inline: 'center'
        });

        if (this.scrollTimeout) {
          clearTimeout(this.scrollTimeout);
        }

        this.scrollTimeout = setTimeout(() => {
          onFocus(path);
          onClose();
        }, 300);
      } else {
        onFocus(path);
        onClose();
      }
    });
  }

  componentWillUnmount() {
    if (this.scrollTimeout) {
      clearTimeout(this.scrollTimeout);
    }
  }

  resolvePathTitle(path) {
    var type = this.props.documentType;
    var fields = type && type.fields;
    var field = fields && fields.find(curr => curr.name === path[0]);
    return field ? field.type.title : '';
  }

  render() {
    var _this$props2 = this.props,
        kind = _this$props2.kind,
        markers = _this$props2.markers,
        showLink = _this$props2.showLink,
        truncate = _this$props2.truncate;
    var validation = markers.filter(marker => marker.type === 'validation');
    var errors = validation.filter(marker => marker.level === 'error');
    var warnings = validation.filter(marker => marker.level === 'warning');

    if (errors.length === 0 && warnings.length === 0) {
      return /*#__PURE__*/_react.default.createElement("div", null);
    }

    return /*#__PURE__*/_react.default.createElement("ul", {
      className: _ValidationList.default.root,
      "data-kind": kind
    }, errors.length > 0 && errors.map((error, i) => /*#__PURE__*/_react.default.createElement("li", {
      className: _ValidationList.default.item,
      key: i
    }, /*#__PURE__*/_react.default.createElement(_ValidationListItem.default, {
      kind: kind,
      truncate: truncate,
      path: this.resolvePathTitle(error.path),
      marker: error,
      onClick: this.handleClick,
      showLink: showLink
    }))), warnings.length > 0 && warnings.map((warning, i) => /*#__PURE__*/_react.default.createElement("li", {
      className: _ValidationList.default.item,
      key: i
    }, /*#__PURE__*/_react.default.createElement(_ValidationListItem.default, {
      kind: kind,
      truncate: truncate,
      path: this.resolvePathTitle(warning.path),
      marker: warning,
      onClick: this.handleClick,
      showLink: showLink
    }))));
  }

}

exports.default = ValidationList;

_defineProperty(ValidationList, "defaultProps", {
  markers: [],
  documentType: null,
  onClose: () => undefined,
  showLink: false,
  onFocus: () => undefined
});