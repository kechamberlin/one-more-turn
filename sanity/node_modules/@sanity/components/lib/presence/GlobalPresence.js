"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GlobalPresence = GlobalPresence;

var _orderBy2 = _interopRequireDefault(require("lodash/orderBy"));

var _react = _interopRequireDefault(require("react"));

var _usersIcon = _interopRequireDefault(require("part:@sanity/base/users-icon"));

var _router = require("part:@sanity/base/router");

var PathUtils = _interopRequireWildcard(require("@sanity/util/paths"));

var _GlobalPresence = _interopRequireDefault(require("./GlobalPresence.css"));

var _PopoverList = _interopRequireDefault(require("./PopoverList"));

var _utils = require("./utils");

var _StackCounter = _interopRequireDefault(require("./StackCounter"));

var _UserAvatar = _interopRequireDefault(require("./UserAvatar"));

var _PresenceListItem = require("./PresenceListItem");

var _constants = require("./constants");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function GlobalPresenceListItem(props) {
  var _presence$user;

  var presence = props.presence,
      onClose = props.onClose,
      size = props.size;
  var lastActiveLocation = (0, _orderBy2.default)(presence.locations || [], ['lastActiveAt'], ['desc']).find(location => location.documentId);

  var item = /*#__PURE__*/_react.default.createElement(_PresenceListItem.PresenceListItem, {
    user: presence.user,
    status: presence.status,
    size: size,
    hasLink: lastActiveLocation === null || lastActiveLocation === void 0 ? void 0 : lastActiveLocation.documentId
  });

  return lastActiveLocation ? /*#__PURE__*/_react.default.createElement(_router.IntentLink, {
    title: (presence === null || presence === void 0 ? void 0 : (_presence$user = presence.user) === null || _presence$user === void 0 ? void 0 : _presence$user.displayName) && "Go to ".concat(presence.user.displayName),
    className: _GlobalPresence.default.intentLink,
    intent: "edit",
    params: {
      id: lastActiveLocation.documentId,
      path: encodeURIComponent(PathUtils.toString(lastActiveLocation.path))
    },
    onClick: onClose
  }, item) : item;
}

function GlobalPresence(_ref) {
  var projectId = _ref.projectId,
      presence = _ref.presence,
      _ref$maxAvatars = _ref.maxAvatars,
      maxAvatars = _ref$maxAvatars === void 0 ? _constants.MAX_AVATARS_GLOBAL : _ref$maxAvatars;

  var _splitRight = (0, _utils.splitRight)(presence, maxAvatars),
      _splitRight2 = _slicedToArray(_splitRight, 2),
      hiddenUsers = _splitRight2[0],
      visibleUsers = _splitRight2[1];

  var showCounter = hiddenUsers.length >= maxAvatars - 1 || presence.length === 0;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: _GlobalPresence.default.root
  }, /*#__PURE__*/_react.default.createElement(_PopoverList.default, {
    items: presence,
    renderItem: (item, onClose) => /*#__PURE__*/_react.default.createElement(GlobalPresenceListItem, {
      presence: item,
      size: "medium",
      onClose: onClose
    }),
    isGlobal: true,
    projectId: projectId,
    trigger: "click"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _GlobalPresence.default.inner,
    tabIndex: -1
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _GlobalPresence.default.mobileContent
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _GlobalPresence.default.icon
  }, presence.length > 0 && /*#__PURE__*/_react.default.createElement("div", {
    className: _GlobalPresence.default.statusIndicator
  }), /*#__PURE__*/_react.default.createElement(_usersIcon.default, null))), /*#__PURE__*/_react.default.createElement("div", {
    className: _GlobalPresence.default.avatars
  }, showCounter && /*#__PURE__*/_react.default.createElement(_StackCounter.default, {
    count: hiddenUsers.length,
    tone: "navbar"
  }), visibleUsers.map(presentUser => /*#__PURE__*/_react.default.createElement("div", {
    className: _GlobalPresence.default.avatarOverlap,
    key: presentUser.user.id
  }, /*#__PURE__*/_react.default.createElement(_UserAvatar.default, {
    user: presentUser.user,
    tone: "navbar"
  })))))));
}