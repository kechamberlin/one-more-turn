"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CirclesStory = CirclesStory;

var _range2 = _interopRequireDefault(require("lodash/range"));

var _react = _interopRequireDefault(require("react"));

var _knobs = require("part:@sanity/storybook/addons/knobs");

var _PresenceCircles = _interopRequireDefault(require("../PresenceCircles"));

var _chance = _interopRequireDefault(require("chance"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var chance = new _chance.default();
var markers = (0, _range2.default)(50).map(marker => {
  return {
    type: 'presence',
    identity: chance.geohash({
      length: 9
    }),
    session: chance.guid(),
    color: chance.color(),
    user: {
      displayName: chance.name(),
      imageUrl: "https://placeimg.com/64/64/any?".concat(Math.random() * 1000)
    }
  };
});

function CirclesStory() {
  var showImage = (0, _knobs.boolean)('show image', true, 'test');
  var backgroundColor = (0, _knobs.color)('background color', '#ccc', 'test');
  var newMarkers = markers.map(marker => {
    return _objectSpread(_objectSpread({}, marker), {}, {
      user: _objectSpread(_objectSpread({}, marker.user), {}, {
        imageUrl: showImage ? marker.user.imageUrl : undefined
      })
    });
  });
  return /*#__PURE__*/_react.default.createElement("div", {
    style: {
      padding: '2em',
      backgroundColor,
      position: 'relative'
    }
  }, /*#__PURE__*/_react.default.createElement(_PresenceCircles.default, {
    markers: newMarkers.slice(0, (0, _knobs.number)('Number of markers', 10, 'test'))
  }));
}