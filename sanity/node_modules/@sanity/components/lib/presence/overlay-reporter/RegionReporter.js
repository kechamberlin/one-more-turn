"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RegionReporter = void 0;

var React = _interopRequireWildcard(require("react"));

var _context = require("./context");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var RegionReporter = /*#__PURE__*/React.memo(function RegionReporter(props) {
  var id = props.id,
      component = props.component,
      data = props.data;
  var ref = React.useRef();
  var context = React.useContext(_context.Context);
  React.useEffect(() => {
    context.dispatch({
      type: 'mount',
      id,
      element: ref.current,
      data,
      component
    });
    return () => {
      context.dispatch({
        type: 'unmount',
        id
      });
    };
  }, []);
  React.useEffect(() => {
    context.dispatch({
      type: 'update',
      id,
      data,
      component
    });
  }, [props]);
  var Component = component;
  return (
    /*#__PURE__*/
    // note the wrapper here must be a block element for ResizeObserver to work properly
    React.createElement("div", {
      ref: ref,
      style: _objectSpread({
        display: 'inline-block',
        visibility: 'hidden'
      }, props.style)
    }, /*#__PURE__*/React.createElement(Component, data))
  );
});
exports.RegionReporter = RegionReporter;