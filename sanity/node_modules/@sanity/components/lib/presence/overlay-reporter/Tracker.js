"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tracker = void 0;

var React = _interopRequireWildcard(require("react"));

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _resizeObserver = require("./resizeObserver");

var _context = require("./context");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function isId(id) {
  return event => event.id === id;
}

var getOffsetsTo = (source, target) => {
  var el = source;
  var top = 0;
  var left = 0;

  while (el && el !== target) {
    top += el.offsetTop;
    left += el.offsetLeft;
    el = el.offsetParent;
  }

  return {
    top,
    left
  };
};

function getRelativeRect(element, parent) {
  return _objectSpread(_objectSpread({}, getOffsetsTo(element, parent)), {}, {
    width: element.offsetWidth,
    height: element.offsetHeight
  });
}

var Tracker = /*#__PURE__*/React.memo(function Tracker(props) {
  var trackerRef = React.useRef();

  var _React$useState = React.useState([]),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      items = _React$useState2[0],
      setItems = _React$useState2[1];

  var regionReporterElementEvents$ = React.useMemo(() => new _rxjs.ReplaySubject(), []);
  React.useEffect(() => {
    var resizeObserver = (0, _resizeObserver.createResizeObserver)();
    var trackerBounds$ = resizeObserver.observe(trackerRef.current).pipe((0, _operators.publishReplay)(1), (0, _operators.refCount)());
    var all$ = regionReporterElementEvents$.pipe((0, _operators.share)());
    var mounts$ = all$.pipe((0, _operators.filter)(ev => ev.type === 'mount'));
    var updates$ = all$.pipe((0, _operators.filter)(ev => ev.type === 'update'));
    var unmounts$ = all$.pipe((0, _operators.filter)(ev => ev.type === 'unmount'));
    var positions$ = mounts$.pipe((0, _operators.mergeMap)((mountEvent, i) => {
      var elementId = mountEvent.id;
      var unmounted$ = unmounts$.pipe((0, _operators.filter)(isId(elementId)), (0, _operators.share)());
      var elementUpdates$ = updates$.pipe((0, _operators.filter)(isId(elementId)), (0, _operators.share)());
      return (0, _rxjs.merge)(trackerBounds$.pipe((0, _operators.map)(() => ({
        type: 'update',
        id: elementId,
        rect: getRelativeRect(mountEvent.element, trackerRef.current)
      }))), elementUpdates$.pipe((0, _operators.map)(update => ({
        type: 'update',
        id: elementId,
        data: update.data,
        component: update.component,
        rect: getRelativeRect(mountEvent.element, trackerRef.current)
      }))), unmounted$.pipe((0, _operators.map)(() => ({
        type: 'remove',
        id: elementId,
        children: null,
        rect: null
      }))));
    }), (0, _operators.scan)((items, event) => {
      if (event.type === 'update') {
        var exists = items.some(item => item.id === event.id);

        if (exists) {
          return items.map(item => item.id === event.id ? {
            id: event.id,
            data: event.data || item.data,
            component: event.component || item.component,
            rect: event.rect || item.rect
          } : item);
        }

        return items.concat({
          id: event.id,
          rect: event.rect,
          data: event.data,
          component: event.component
        });
      }

      if (event.type === 'remove') {
        // todo: it would be better to keep track of elements a little while after their elements actually
        // unmounts. this will make it possible to support fade out transitions and also animate components
        // where the react reconciliation decides the most effective thing to do is to unmount and remount the
        // component
        // return items
        return items.filter(item => item.id !== event.id);
      }

      return items;
    }, []), (0, _operators.map)(items => items.filter(item => item.rect)), (0, _operators.distinctUntilChanged)(), (0, _operators.debounceTime)(100));
    var sub = positions$.pipe((0, _operators.tap)(setItems)).subscribe();
    return () => sub.unsubscribe();
  }, []);
  var dispatch = React.useCallback(event => {
    regionReporterElementEvents$.next(event);
  }, []);
  var Component = props.component,
      componentProps = props.componentProps;
  return /*#__PURE__*/React.createElement(_context.Context.Provider, {
    value: {
      dispatch
    }
  }, /*#__PURE__*/React.createElement(Component, _extends({}, componentProps, {
    regions: items,
    trackerRef: trackerRef
  }), props.children));
});
exports.Tracker = Tracker;