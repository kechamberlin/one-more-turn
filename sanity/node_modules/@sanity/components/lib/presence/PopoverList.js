"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PopoverList;

var _react = _interopRequireWildcard(require("react"));

var _reactTippy = require("react-tippy");

var _cogIcon = _interopRequireDefault(require("part:@sanity/base/cog-icon"));

var _autoId = require("@reach/auto-id");

var _PopoverList = _interopRequireDefault(require("./PopoverList.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function PopoverList(_ref) {
  var _ref$items = _ref.items,
      items = _ref$items === void 0 ? [] : _ref$items,
      _ref$position = _ref.position,
      position = _ref$position === void 0 ? 'bottom-end' : _ref$position,
      _ref$distance = _ref.distance,
      distance = _ref$distance === void 0 ? 0 : _ref$distance,
      trigger = _ref.trigger,
      renderItem = _ref.renderItem,
      children = _ref.children,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      _ref$isGlobal = _ref.isGlobal,
      isGlobal = _ref$isGlobal === void 0 ? false : _ref$isGlobal,
      projectId = _ref.projectId;
  var elementId = (0, _autoId.useId)();

  var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      isOpen = _useState2[0],
      setIsOpen = _useState2[1];

  var handleToggleList = event => {
    if (event.key === 'Enter' || event.key === ' ' || event.button === 0) {
      return setIsOpen(!isOpen);
    }
  };

  var handleCloseList = () => {
    setIsOpen(false);
  };

  var html = /*#__PURE__*/_react.default.createElement("div", {
    className: _PopoverList.default.inner,
    role: "menu",
    id: elementId,
    "aria-label": "Online users",
    tabIndex: -1
  }, isGlobal && items.length < 1 && /*#__PURE__*/_react.default.createElement("div", {
    className: _PopoverList.default.header
  }, /*#__PURE__*/_react.default.createElement("h2", {
    className: _PopoverList.default.title
  }, "No one else is here"), /*#__PURE__*/_react.default.createElement("p", {
    className: _PopoverList.default.subtitle
  }, "Invite people to your project to see their online status.")), items.length > 0 && /*#__PURE__*/_react.default.createElement("ul", {
    className: "".concat(_PopoverList.default.userList, " ").concat(isGlobal ? _PopoverList.default.globalUserList : '')
  }, items.map(item => /*#__PURE__*/_react.default.createElement("li", {
    key: item.user.id
  }, renderItem(item, handleCloseList)))), isGlobal && projectId && /*#__PURE__*/_react.default.createElement("div", {
    className: _PopoverList.default.manageMembers
  }, /*#__PURE__*/_react.default.createElement("a", {
    href: "https://manage.sanity.io/projects/".concat(projectId, "/team"),
    className: _PopoverList.default.manageLink,
    target: "_blank",
    rel: "noopener noreferrer",
    onClick: handleCloseList
  }, /*#__PURE__*/_react.default.createElement("span", null, "Manage members"), /*#__PURE__*/_react.default.createElement(_cogIcon.default, null))));

  return /*#__PURE__*/_react.default.createElement("div", {
    className: _PopoverList.default.root
  }, /*#__PURE__*/_react.default.createElement(_reactTippy.Tooltip, {
    useContext: true,
    html: html,
    disabled: disabled,
    interactive: true,
    position: position,
    trigger: trigger,
    arrow: true,
    theme: "light",
    distance: distance,
    open: isOpen,
    onRequestClose: handleCloseList,
    popperOptions: {
      modifiers: {
        preventOverflow: {
          boundariesElement: 'window'
        },
        flip: {
          enabled: false
        }
      }
    }
  }, /*#__PURE__*/_react.default.createElement("button", {
    "aria-label": isOpen ? 'Hide online collaborators' : 'Show online collaborators',
    type: "button",
    className: isGlobal ? _PopoverList.default.globalButton : _PopoverList.default.button,
    "aria-haspopup": "true",
    "aria-expanded": isOpen,
    "aria-controls": elementId,
    onKeyDown: handleToggleList,
    onClick: handleToggleList,
    style: isGlobal ? {
      height: '100%'
    } : {}
  }, children)));
}