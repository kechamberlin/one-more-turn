/// <reference types="react" />
export declare type Position = 'top' | 'bottom' | 'inside' | null;
export declare type Size = 'xsmall' | 'small' | 'medium';
export declare type RegionWithIntersectionDetails = {
    distanceTop: number;
    distanceBottom: number;
    position: 'top' | 'bottom' | 'inside';
    region: Region;
};
export declare type Region = {
    id: string;
    data: Data;
    rect: {
        top: number;
        left: number;
        height: number;
        width: number;
    };
    component: React.ComponentType<Data>;
    spacerHeight?: number;
};
declare type Data = {
    presence: FormFieldPresence[];
    maxAvatars: number;
    avatarComponent: React.ComponentType;
};
export declare type Status = 'online' | 'editing' | 'inactive';
export declare type PathElement = string | number | {
    _key: string;
};
export interface User {
    id: string;
    displayName?: string;
    imageUrl?: string;
}
export declare type PresentUser = {
    user: User;
    status?: Status;
    sessions?: Session[];
};
export interface Session {
    id: string;
    locations: Location[];
}
export interface Location {
    documentId: string;
    path: PathElement[];
}
export interface FormFieldPresence {
    user: User;
    path: PathElement[];
    sessionId: string;
    lastActiveAt: string;
}
export interface PresenceLocation {
    type: 'document';
    documentId: string;
    path: PathElement[];
    data: PresenceData;
    lastActiveAt: string;
}
declare type PresenceData = {
    [key: string]: any;
};
export declare type GlobalPresenceItem = {
    user: User;
    status: Status;
    lastActiveAt: string;
    locations: PresenceLocation[];
};
export {};
