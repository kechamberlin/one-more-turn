"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StickyOverlay = StickyOverlay;

var _sortBy2 = _interopRequireDefault(require("lodash/sortBy"));

var _orderBy2 = _interopRequireDefault(require("lodash/orderBy"));

var _groupBy2 = _interopRequireDefault(require("lodash/groupBy"));

var _flatten2 = _interopRequireDefault(require("lodash/flatten"));

var React = _interopRequireWildcard(require("react"));

var _RegionsWithIntersections = require("./RegionsWithIntersections");

var _constants = require("../constants");

var _FieldPresence = require("../FieldPresence");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ITEM_TRANSITION = {
  transitionProperty: 'transform',
  transitionDuration: '200ms',
  transitionTimingFunction: 'cubic-bezier(0.85, 0, 0.15, 1)'
};

var bottom = rect => rect.top + rect.height;

function withSpacerHeight(regionsWithIntersectionDetails) {
  return regionsWithIntersectionDetails.map((withIntersection, idx, regionsWithIntersectionDetails) => {
    var _regionsWithIntersect;

    var prevRect = (_regionsWithIntersect = regionsWithIntersectionDetails[idx - 1]) === null || _regionsWithIntersect === void 0 ? void 0 : _regionsWithIntersect.region.rect;
    var prevBottom = prevRect ? bottom(prevRect) : 0;
    return _objectSpread(_objectSpread({}, withIntersection), {}, {
      spacerHeight: withIntersection.region.rect.top - prevBottom
    });
  });
}

var orderByTop = regionsWithIntersectionDetails => (0, _orderBy2.default)(regionsWithIntersectionDetails, withIntersection => withIntersection.region.rect.top);

var plus = (a, b) => a + b;

var sum = array => array.reduce(plus, 0);

function group(regionsWithIntersectionDetails) {
  var regionsWithSpacerHeight = withSpacerHeight(orderByTop(regionsWithIntersectionDetails));

  var grouped = _objectSpread({
    top: [],
    inside: [],
    bottom: []
  }, (0, _groupBy2.default)(regionsWithSpacerHeight, withSpacerHeight => withSpacerHeight.position));

  return {
    top: orderByTop(grouped.top).map((withIntersection, i, grp) => _objectSpread(_objectSpread({}, withIntersection), {}, {
      indent: grp.slice(i + 1).reduce((w, withIntersection) => w + withIntersection.region.rect.width, 0)
    })),
    inside: orderByTop(grouped.inside).map(withIntersection => _objectSpread(_objectSpread({}, withIntersection), {}, {
      indent: 0
    })),
    bottom: orderByTop(grouped.bottom).map((withIntersection, i, grp) => _objectSpread(_objectSpread({}, withIntersection), {}, {
      indent: grp.slice(0, i).reduce((w, withIntersection) => w + withIntersection.region.rect.width, 0)
    }))
  };
}

var Spacer = (_ref) => {
  var height = _ref.height,
      rest = _objectWithoutProperties(_ref, ["height"]);

  return /*#__PURE__*/React.createElement("div", {
    style: _objectSpread({
      height: Math.max(0, height)
    }, rest === null || rest === void 0 ? void 0 : rest.style)
  });
};

var DEFAULT_MARGINS = [0, 0, 0, 0];

function StickyOverlay(props) {
  var regions = props.regions,
      children = props.children,
      trackerRef = props.trackerRef,
      _props$margins = props.margins,
      margins = _props$margins === void 0 ? DEFAULT_MARGINS : _props$margins;
  return /*#__PURE__*/React.createElement(_RegionsWithIntersections.RegionsWithIntersections, {
    margins: margins,
    regions: regions,
    trackerRef: trackerRef,
    render: (regionsWithIntersectionDetails, containerWidth) => {
      var grouped = group(regionsWithIntersectionDetails.filter(item => item.region.data.presence.length > 0));
      var topSpacing = sum(grouped.top.map(n => n.region.rect.height + n.spacerHeight));
      var bottomSpacing = sum([...grouped.inside, ...grouped.bottom].map(n => n.region.rect.height + n.spacerHeight)); // todo: this needs cleaning up, should process all the needed layout data in one go

      var counts = grouped.inside.reduce((counts, withIntersection) => {
        var distanceTop = withIntersection.distanceTop,
            distanceBottom = withIntersection.distanceBottom;
        var nearTop = distanceTop <= _constants.SLIDE_RIGHT_THRESHOLD_TOP;
        var nearBottom = distanceBottom <= _constants.SLIDE_RIGHT_THRESHOLD_BOTTOM;
        return {
          nearTop: counts.nearTop + (nearTop ? withIntersection.region.data.presence.length : 0),
          nearBottom: counts.nearBottom + (nearBottom ? withIntersection.region.data.presence.length : 0)
        };
      }, {
        nearTop: 0,
        nearBottom: 0
      });
      return /*#__PURE__*/React.createElement(React.Fragment, null, [renderDock('top', margins, grouped.top, counts.nearTop), /*#__PURE__*/React.createElement(Spacer, {
        key: "spacerTop",
        height: topSpacing
      }), ...renderInside(grouped.inside, containerWidth), /*#__PURE__*/React.createElement(Spacer, {
        key: "spacerBottom",
        height: bottomSpacing
      }), renderDock('bottom', margins, grouped.bottom, counts.nearBottom)]);
    }
  }, children);
}

function renderDock(position, margins, regionsWithIntersectionDetails, closeCount) {
  var dir = position === 'top' ? 1 : -1;
  var allPresenceItems = (0, _flatten2.default)((0, _sortBy2.default)(regionsWithIntersectionDetails, r => r.region.rect.top * dir).map(withIntersection => {
    var _withIntersection$reg;

    return ((_withIntersection$reg = withIntersection.region.data) === null || _withIntersection$reg === void 0 ? void 0 : _withIntersection$reg.presence) || [];
  }) || []);

  var _margins = _slicedToArray(margins, 4),
      topMargin = _margins[0],
      rightMargin = _margins[1],
      bottomMargin = _margins[2],
      leftMargin = _margins[3];

  var leftOffset = (leftMargin || 0) + (allPresenceItems.length > 0 ? -closeCount * (_constants.AVATAR_SIZE + _constants.AVATAR_DISTANCE) : 0) - rightMargin;
  var margin = position === 'top' ? topMargin : bottomMargin;
  return /*#__PURE__*/React.createElement("div", {
    "data-dock": position,
    key: "sticky-".concat(position),
    style: _objectSpread(_objectSpread({
      position: 'sticky',
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'flex-end'
    }, ITEM_TRANSITION), {}, {
      transform: "translate3d(".concat(leftOffset, "px, 0px, 0px)"),
      top: _constants.AVATAR_ARROW_HEIGHT + 1 + margin,
      bottom: _constants.AVATAR_ARROW_HEIGHT + 1 + margin
    })
  }, /*#__PURE__*/React.createElement(_FieldPresence.FieldPresenceInner, {
    position: position,
    maxAvatars: _constants.MAX_AVATARS_DOCK,
    presence: allPresenceItems
  }));
}

function renderInside(regionsWithIntersectionDetails, containerWidth) {
  return regionsWithIntersectionDetails.map(withIntersection => {
    var originalLeft = withIntersection.region.rect.left;
    var distanceTop = withIntersection.distanceTop,
        distanceBottom = withIntersection.distanceBottom;
    var nearTop = distanceTop <= _constants.SLIDE_RIGHT_THRESHOLD_TOP;
    var nearBottom = distanceBottom <= _constants.SLIDE_RIGHT_THRESHOLD_BOTTOM;
    var diffRight = containerWidth - originalLeft - withIntersection.region.rect.width;
    var _withIntersection$reg2 = withIntersection.region.data,
        presence = _withIntersection$reg2.presence,
        maxAvatars = _withIntersection$reg2.maxAvatars;
    return /*#__PURE__*/React.createElement(React.Fragment, {
      key: withIntersection.region.id
    }, /*#__PURE__*/React.createElement("div", {
      style: _objectSpread(_objectSpread({
        position: 'absolute',
        pointerEvents: 'all'
      }, ITEM_TRANSITION), {}, {
        left: originalLeft,
        transform: "translate3d(".concat(nearTop || nearBottom ? diffRight : 0, "px, 0px, 0px)"),
        height: withIntersection.region.rect.height,
        top: withIntersection.region.rect.top
      })
    }, /*#__PURE__*/React.createElement(DebugValue, {
      value: () => "\u2912".concat(distanceTop, " | ").concat(distanceBottom, "\u2913")
    }, /*#__PURE__*/React.createElement(_FieldPresence.FieldPresenceInner, {
      stack: !nearTop && !nearBottom,
      position: nearTop ? 'top' : nearBottom ? 'bottom' : 'inside',
      maxAvatars: maxAvatars,
      presence: presence
    }))));
  });
}

var PassThrough = props => props.children;

var DebugValue = _constants.DEBUG ? function DebugValue(props) {
  return /*#__PURE__*/React.createElement("div", {
    style: {
      position: 'absolute'
    }
  }, props.children, /*#__PURE__*/React.createElement("span", {
    style: {
      top: 0,
      left: -15,
      fontSize: 11,
      right: -15,
      textAlign: 'center',
      height: _constants.AVATAR_SIZE,
      color: 'white',
      backgroundColor: 'rgba(0, 0, 0, 0.8)',
      position: 'absolute',
      zIndex: 1000
    }
  }, props.value()));
} : PassThrough;