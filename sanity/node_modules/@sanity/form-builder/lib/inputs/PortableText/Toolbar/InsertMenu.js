"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = InsertMenu;

var _plusIcon = _interopRequireDefault(require("part:@sanity/base/plus-icon"));

var _default = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _react = _interopRequireDefault(require("react"));

var _reactTippy = require("react-tippy");

var _InsertMenu = _interopRequireDefault(require("./InsertMenu.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function InsertMenu(props) {
  var disabled = props.disabled,
      items = props.items,
      readOnly = props.readOnly;

  var _React$useState = _react.default.useState(false),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      open = _React$useState2[0],
      setOpen = _React$useState2[1];

  var handleOpen = () => {
    setOpen(true);
  };

  var handleClose = () => {
    setOpen(false);
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    className: _InsertMenu.default.root
  }, /*#__PURE__*/_react.default.createElement(_reactTippy.Tooltip, {
    arrow: true,
    className: _InsertMenu.default.initialValueMenuTooltip,
    distance: 13,
    theme: "light",
    trigger: 'click',
    position: "bottom",
    interactive: true,
    open: open,
    onRequestClose: handleClose,
    useContext: true,
    html: /*#__PURE__*/_react.default.createElement("div", {
      className: _InsertMenu.default.menu
    }, items.map(item => {
      var itemIsDisabled = item.disabled;
      var title = item.type.title || item.type.type.name;
      return /*#__PURE__*/_react.default.createElement("button", {
        "aria-label": "Insert ".concat(title).concat(item.inline ? ' (inline)' : ' (block)'),
        disabled: itemIsDisabled,
        className: _InsertMenu.default.menuItem,
        key: item.key,
        onClick: () => {
          item.handle();
          handleClose();
        },
        title: "Insert ".concat(title).concat(item.inline ? ' (inline)' : ' (block)'),
        type: "button"
      }, /*#__PURE__*/_react.default.createElement("span", {
        className: _InsertMenu.default.iconContainer
      }, /*#__PURE__*/_react.default.createElement(item.icon)), /*#__PURE__*/_react.default.createElement("span", {
        className: _InsertMenu.default.title
      }, title));
    }))
  }, /*#__PURE__*/_react.default.createElement(_default.default, {
    "aria-label": "Insert elements",
    "aria-haspopup": "menu",
    "aria-expanded": open,
    "aria-controls": 'insertmenu',
    disabled: disabled || readOnly,
    icon: _plusIcon.default,
    kind: "simple",
    onClick: handleOpen,
    padding: "small",
    selected: open,
    title: "Insert elements"
  }, "Insert")));
}