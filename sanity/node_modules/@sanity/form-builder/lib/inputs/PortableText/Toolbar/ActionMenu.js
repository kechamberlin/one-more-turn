"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ActionMenu;

var _button = _interopRequireDefault(require("part:@sanity/components/toggles/button"));

var _react = _interopRequireDefault(require("react"));

var _OverflowMenu = require("./OverflowMenu");

var _ActionMenu = _interopRequireDefault(require("./ActionMenu.css"));

var _portableTextEditor = require("@sanity/portable-text-editor");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function ActionButton(props) {
  var action = props.action,
      disabled = props.disabled,
      visible = props.visible;
  var title = action.hotkeys ? "".concat(action.title, " (").concat(action.hotkeys.join('+'), ")") : action.title;
  return /*#__PURE__*/_react.default.createElement(_button.default, {
    "aria-hidden": !visible,
    "data-visible": visible,
    disabled: disabled,
    icon: action.icon,
    kind: "simple",
    padding: "small",
    onClick: action.handle,
    tabIndex: visible ? 0 : -1,
    selected: action.active,
    title: title
  });
}

function ActionMenuItem(props) {
  var action = props.action,
      disabled = props.disabled,
      onClose = props.onClose;
  var title = action.hotkeys ? "".concat(action.title, " (").concat(action.hotkeys.join('+'), ")") : action.title;
  return /*#__PURE__*/_react.default.createElement("button", {
    className: _ActionMenu.default.menuItem,
    disabled: disabled,
    onClick: () => {
      action.handle();
      onClose();
    },
    type: "button"
  }, /*#__PURE__*/_react.default.createElement("span", {
    className: _ActionMenu.default.iconContainer
  }, /*#__PURE__*/_react.default.createElement(action.icon)), /*#__PURE__*/_react.default.createElement("span", {
    className: _ActionMenu.default.title
  }, title));
}

function ActionMenu(props) {
  var disabled = props.disabled,
      groups = props.groups,
      readOnly = props.readOnly;
  var editor = (0, _portableTextEditor.usePortableTextEditor)();

  var focusBlock = _portableTextEditor.PortableTextEditor.focusBlock(editor);

  var focusChild = _portableTextEditor.PortableTextEditor.focusChild(editor);

  var ptFeatures = _portableTextEditor.PortableTextEditor.getPortableTextFeatures(editor);

  var isNotText = focusBlock && focusBlock._type !== ptFeatures.types.block.name || focusChild && focusChild._type !== ptFeatures.types.span.name;
  var actions = groups.reduce((acc, group) => {
    return acc.concat(group.actions.map((action, actionIndex) => {
      if (actionIndex === 0) return _objectSpread(_objectSpread({}, action), {}, {
        firstInGroup: true
      });
      return action;
    }));
  }, []);
  return /*#__PURE__*/_react.default.createElement(_OverflowMenu.OverflowMenu, {
    actions: actions,
    actionButtonComponent: ActionButton,
    actionMenuItemComponent: ActionMenuItem,
    disabled: disabled || readOnly || isNotText
  });
}