"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactTippy = require("react-tippy");

var _paths = require("@sanity/util/paths");

var _portableTextEditor = require("@sanity/portable-text-editor");

var _errorIcon = _interopRequireDefault(require("part:@sanity/base/error-icon"));

var _default2 = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _list = _interopRequireDefault(require("part:@sanity/components/validation/list"));

var _PortableTextInput = _interopRequireDefault(require("./PortableTextInput.css"));

var _Toolbar = _interopRequireDefault(require("./Toolbar/Toolbar"));

var _expandCollapseButton = require("./expandCollapseButton");

var _BlockExtrasOverlay = _interopRequireDefault(require("./BlockExtrasOverlay"));

var _Decorator = _interopRequireDefault(require("./Text/Decorator"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var renderDecorator = (mark, mType, attributes, defaultRender) => {
  return /*#__PURE__*/_react.default.createElement(_Decorator.default, {
    mark: mark
  }, defaultRender());
};

function PortableTextSanityEditor(props) {
  var initialSelection = props.initialSelection,
      isFullscreen = props.isFullscreen,
      markers = props.markers,
      onCloseValidationResults = props.onCloseValidationResults,
      onCopy = props.onCopy,
      onFocus = props.onFocus,
      onFormBuilderChange = props.onFormBuilderChange,
      onPaste = props.onPaste,
      onToggleFullscreen = props.onToggleFullscreen,
      onToggleValidationResults = props.onToggleValidationResults,
      portableTextFeatures = props.portableTextFeatures,
      readOnly = props.readOnly,
      renderAnnotation = props.renderAnnotation,
      renderBlock = props.renderBlock,
      renderBlockActions = props.renderBlockActions,
      renderChild = props.renderChild,
      renderCustomMarkers = props.renderCustomMarkers,
      showValidationTooltip = props.showValidationTooltip,
      value = props.value;

  var handleOpenObjectHotkey = (event, ptEditor) => {
    var selection = _portableTextEditor.PortableTextEditor.getSelection(ptEditor);

    if (selection) {
      event.preventDefault();
      event.stopPropagation();
      var focus = selection.focus;

      var activeAnnotations = _portableTextEditor.PortableTextEditor.activeAnnotations(ptEditor);

      var focusBlock = _portableTextEditor.PortableTextEditor.focusBlock(ptEditor);

      var focusChild = _portableTextEditor.PortableTextEditor.focusChild(ptEditor);

      if (activeAnnotations.length > 0) {
        onFocus([...focus.path.slice(0, 1), 'markDefs', {
          _key: activeAnnotations[0]._key
        }, _paths.FOCUS_TERMINATOR]);
        return;
      }

      if (focusChild && _portableTextEditor.PortableTextEditor.isVoid(ptEditor, focusChild)) {
        onFocus([...focus.path, _paths.FOCUS_TERMINATOR]);
        return;
      }

      if (focusBlock && _portableTextEditor.PortableTextEditor.isVoid(ptEditor, focusBlock)) {
        onFocus([...focus.path.slice(0, 1), _paths.FOCUS_TERMINATOR]);
      }
    }
  };

  var customFromProps = {
    custom: _objectSpread({
      'mod+enter': props.onToggleFullscreen
    }, (props.hotkeys || {}).custom)
  };
  var marksFromProps = {
    marks: _objectSpread({
      'mod+b': 'strong',
      'mod+i': 'em',
      'mod+u': 'underline',
      "mod+'": 'code'
    }, (props.hotkeys || {}).marks)
  };

  var hotkeys = _objectSpread(_objectSpread({}, marksFromProps), customFromProps);

  var hasMarkers = markers.length > 0;
  var scClassNames = [_PortableTextInput.default.scrollContainer, ...(renderBlockActions || hasMarkers ? [_PortableTextInput.default.hasBlockExtras] : [])].join(' ');
  var editorWrapperClassNames = [_PortableTextInput.default.editorWrapper].join(' ');
  var editorClassNames = [_PortableTextInput.default.editor, ...(renderBlockActions || hasMarkers ? [_PortableTextInput.default.hasBlockExtras] : [])].join(' ');
  var validation = markers.filter(marker => marker.type === 'validation');
  var errors = validation.filter(marker => marker.level === 'error');
  var warnings = validation.filter(marker => marker.level === 'warning');
  var validationList = (0, _react.useMemo)(() => /*#__PURE__*/_react.default.createElement(_list.default, {
    markers: validation,
    showLink: true,
    isOpen: showValidationTooltip,
    documentType: portableTextFeatures.types.portableText,
    onClose: onCloseValidationResults,
    onFocus: onFocus
  }), [validation, showValidationTooltip]);
  var renderBlockExtras = (0, _react.useCallback)(() => /*#__PURE__*/_react.default.createElement(_BlockExtrasOverlay.default, {
    isFullscreen: isFullscreen,
    markers: markers,
    onFocus: onFocus,
    onChange: onFormBuilderChange,
    renderBlockActions: readOnly ? undefined : renderBlockActions,
    renderCustomMarkers: renderCustomMarkers,
    value: value
  }), [markers, isFullscreen]);
  var editor = (0, _react.useMemo)(() => /*#__PURE__*/_react.default.createElement("div", {
    className: _PortableTextInput.default.editorBox
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _PortableTextInput.default.header
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: _PortableTextInput.default.toolbarContainer
  }, /*#__PURE__*/_react.default.createElement(_Toolbar.default, {
    isFullscreen: isFullscreen,
    hotkeys: hotkeys,
    onFocus: onFocus,
    renderBlock: renderBlock,
    readOnly: readOnly
  })), isFullscreen && (errors.length > 0 || warnings.length > 0) && /*#__PURE__*/_react.default.createElement("div", {
    className: _PortableTextInput.default.validationContainer
  }, /*#__PURE__*/_react.default.createElement(_reactTippy.Tooltip, {
    arrow: true,
    duration: 100,
    html: validationList,
    interactive: true,
    onRequestClose: onCloseValidationResults,
    open: showValidationTooltip,
    position: "bottom",
    style: {
      padding: 0
    },
    theme: "light",
    trigger: "click"
  }, /*#__PURE__*/_react.default.createElement(_default2.default, {
    color: "danger",
    icon: _errorIcon.default,
    kind: "simple",
    onClick: onToggleValidationResults,
    padding: "small"
  }))), /*#__PURE__*/_react.default.createElement("div", {
    className: _PortableTextInput.default.fullscreenButtonContainer
  }, /*#__PURE__*/_react.default.createElement(_expandCollapseButton.ExpandCollapseButton, {
    isFullscreen: isFullscreen,
    onToggleFullscreen: onToggleFullscreen
  }))), /*#__PURE__*/_react.default.createElement("div", {
    className: scClassNames
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: editorWrapperClassNames
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: editorClassNames
  }, /*#__PURE__*/_react.default.createElement(_portableTextEditor.PortableTextEditable, {
    hotkeys: hotkeys,
    onCopy: onCopy,
    onPaste: onPaste,
    placeholderText: value ? undefined : 'Empty',
    renderAnnotation: renderAnnotation,
    renderBlock: renderBlock,
    renderChild: renderChild,
    renderDecorator: renderDecorator,
    selection: initialSelection,
    spellCheck: true
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: _PortableTextInput.default.blockExtras
  }, renderBlockExtras())))), [initialSelection, isFullscreen, value, markers, readOnly, errors]);
  return editor;
}

var _default = PortableTextSanityEditor;
exports.default = _default;