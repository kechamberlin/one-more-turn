"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EditObject = void 0;

var _debounce2 = _interopRequireDefault(require("lodash/debounce"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _react = _interopRequireWildcard(require("react"));

var _portableTextEditor = require("@sanity/portable-text-editor");

var _simplePatch = require("../../../simplePatch");

var _PatchEvent = require("../../../PatchEvent");

var _DefaultObjectEditing = require("./renderers/DefaultObjectEditing");

var _PopoverObjectEditing = require("./renderers/PopoverObjectEditing");

var _FullscreenObjectEditing = require("./renderers/FullscreenObjectEditing");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var PATCHES = new WeakMap();

// eslint-disable-next-line complexity
var EditObject = (_ref) => {
  var focusPath = _ref.focusPath,
      markers = _ref.markers,
      objectEditData = _ref.objectEditData,
      onBlur = _ref.onBlur,
      onChange = _ref.onChange,
      onClose = _ref.onClose,
      onFocus = _ref.onFocus,
      presence = _ref.presence,
      readOnly = _ref.readOnly,
      value = _ref.value;
  var editor = (0, _portableTextEditor.usePortableTextEditor)();

  var ptFeatures = _portableTextEditor.PortableTextEditor.getPortableTextFeatures(editor);

  var formBuilderPath = objectEditData.formBuilderPath,
      editorPath = objectEditData.editorPath,
      kind = objectEditData.kind;
  var object;
  var type; // Try finding the relevant block

  var blockKey = Array.isArray(formBuilderPath) && formBuilderPath[0] && typeof formBuilderPath[0] === 'object' && formBuilderPath[0]._key;

  var block = value && blockKey && Array.isArray(value) && value.find(blk => blk._key === blockKey);
  var child = block && block.children && block.children.find(cld => typeof editorPath[2] === 'object' && cld._key === editorPath[2]._key);

  if (block) {
    // Get object, type, and relevant editor element
    switch (kind) {
      case 'blockObject':
        object = block;
        type = ptFeatures.types.blockObjects.find(t => t.name === block._type);
        break;

      case 'inlineObject':
        object = child; // eslint-disable-next-line max-depth

        if (object) {
          type = ptFeatures.types.inlineObjects.find(t => t.name === child._type);
        }

        break;

      case 'annotation':
        // eslint-disable-next-line max-depth
        if (child) {
          var markDef = child.marks && block.markDefs && block.markDefs.find(def => child.marks.includes(def._key)); // eslint-disable-next-line max-depth

          if (markDef) {
            type = ptFeatures.types.annotations.find(t => t.name === markDef._type);
            object = markDef;
          }
        }

        break;

      default: // Nothing

    }
  }

  var _useState = (0, _react.useState)(object),
      _useState2 = _slicedToArray(_useState, 2),
      stateValue = _useState2[0],
      setStateValue = _useState2[1];

  var _useState3 = (0, _react.useState)(undefined),
      _useState4 = _slicedToArray(_useState3, 2),
      isThrottling = _useState4[0],
      setIsThrottling = _useState4[1]; // This will cancel the throttle when the user is not producing anything for a short time


  var cancelThrottle = (0, _debounce2.default)(() => {
    setIsThrottling(false);
  }, 500);

  function handleClose() {
    onClose();
  } // Initialize weakmaps on mount, and send patches on unmount


  (0, _react.useEffect)(() => {
    PATCHES.set(editor, []);
    return () => {
      sendPatches();
      PATCHES.delete(editor);
    };
  }, []); // Cancel throttle after editing activity has stopped

  (0, _react.useEffect)(() => {
    if (isThrottling === true) {
      cancelThrottle();
    }
  }, [isThrottling]); // Send away patches when we are no longer throttling

  (0, _react.useEffect)(() => {
    if (isThrottling === false) {
      sendPatches();
    }
  }, [isThrottling]); // Keep value from props in sync

  (0, _react.useEffect)(() => {
    if (!isThrottling) {
      setStateValue(object);
    }
  }, [value]);
  var editModalLayout = (0, _get2.default)(type, 'options.editModal');

  function handleChange(patchEvent) {
    var appliedValue = (0, _simplePatch.applyAll)(stateValue, patchEvent.patches);
    setStateValue(appliedValue);
    var patches = PATCHES.get(editor);

    if (patches) {
      var _patches = PATCHES.get(editor).concat(patchEvent.patches);

      setIsThrottling(true);
      PATCHES.set(editor, _patches);
    }
  }

  function sendPatches() {
    var patches = PATCHES.get(editor);

    if (!patches) {
      return;
    }

    var length = patches.length;

    var _patches = (0, _portableTextEditor.compactPatches)(PATCHES.get(editor).slice(0, length));

    PATCHES.set(editor, PATCHES.get(editor).slice(length));
    setTimeout(() => {
      onChange(_PatchEvent.PatchEvent.from(_patches), formBuilderPath);
    });
  } // Render nothing if object or type wasn't found


  if (!object || !type) {
    return null;
  }

  var editorElement = _portableTextEditor.PortableTextEditor.findDOMNode(editor, child ? child : block); // Render the various editing interfaces


  if (editModalLayout === 'fullscreen') {
    return /*#__PURE__*/_react.default.createElement(_FullscreenObjectEditing.FullscreenObjectEditing, {
      focusPath: focusPath,
      markers: markers,
      object: stateValue,
      onBlur: onBlur,
      onChange: handleChange,
      onClose: handleClose,
      onFocus: onFocus,
      path: formBuilderPath,
      presence: presence,
      readOnly: readOnly,
      type: type
    });
  }

  if (editModalLayout === 'popover' || kind === 'annotation') {
    return /*#__PURE__*/_react.default.createElement(_PopoverObjectEditing.PopoverObjectEditing, {
      focusPath: focusPath,
      markers: markers,
      object: stateValue,
      onBlur: onBlur,
      onChange: handleChange,
      onClose: handleClose,
      onFocus: onFocus,
      path: formBuilderPath,
      presence: presence,
      readOnly: readOnly,
      referenceElement: editorElement,
      type: type
    });
  }

  return /*#__PURE__*/_react.default.createElement(_DefaultObjectEditing.DefaultObjectEditing, {
    focusPath: focusPath,
    markers: markers,
    object: stateValue,
    onBlur: onBlur,
    onChange: handleChange,
    onClose: handleClose,
    onFocus: onFocus,
    path: formBuilderPath,
    presence: presence,
    readOnly: readOnly,
    type: type
  });
};

exports.EditObject = EditObject;