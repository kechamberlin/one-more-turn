"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = BlockExtrasOverlay;

var _react = _interopRequireDefault(require("react"));

var _blockExtras = _interopRequireDefault(require("part:@sanity/form-builder/input/block-editor/block-extras"));

var _portableTextEditor = require("@sanity/portable-text-editor");

var _createBlockActionPatchFn = _interopRequireDefault(require("./utils/createBlockActionPatchFn"));

var _BlockExtrasOverlay = _interopRequireDefault(require("./BlockExtrasOverlay.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var findBlockMarkers = (block, markers) => markers.filter(marker => typeof marker.path[0] === 'object' && marker.path[0]._key === block._key);

function BlockExtrasOverlay(props) {
  var onFocus = props.onFocus,
      renderCustomMarkers = props.renderCustomMarkers,
      renderBlockActions = props.renderBlockActions,
      onChange = props.onChange,
      isFullscreen = props.isFullscreen,
      markers = props.markers,
      value = props.value;
  var editor = (0, _portableTextEditor.usePortableTextEditor)();

  var ptFeatures = _portableTextEditor.PortableTextEditor.getPortableTextFeatures(editor);

  function renderBlockExtras(block) {
    var blockMarkers = findBlockMarkers(block, markers); // Return if no markers

    if (blockMarkers.length === 0 && !renderBlockActions) {
      return null;
    } // Try to find DOMNode and return if not


    var element = _portableTextEditor.PortableTextEditor.findDOMNode(editor, block);

    if (!element) {
      return null;
    }

    var rect = element.getBoundingClientRect();
    var actions = null;

    if (renderBlockActions) {
      var RenderComponent = renderBlockActions;

      if (block) {
        actions = /*#__PURE__*/_react.default.createElement(RenderComponent, {
          block: block,
          value: value,
          set: (0, _createBlockActionPatchFn.default)('set', block, onChange, ptFeatures),
          unset: (0, _createBlockActionPatchFn.default)('unset', block, onChange, ptFeatures),
          insert: (0, _createBlockActionPatchFn.default)('insert', block, onChange, ptFeatures)
        });
      }
    }

    if (blockMarkers.length === 0 && !actions) {
      return null;
    }

    return /*#__PURE__*/_react.default.createElement("div", {
      key: "blockExtras-".concat(block._key),
      className: _BlockExtrasOverlay.default.root,
      style: {
        top: element.scrollTop + element.offsetTop,
        height: rect.height
      }
    }, /*#__PURE__*/_react.default.createElement(_blockExtras.default, {
      block: block,
      isFullscreen: isFullscreen,
      blockActions: actions,
      markers: blockMarkers,
      onFocus: onFocus,
      renderCustomMarkers: renderCustomMarkers
    }));
  } // Render overlay for each block


  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, (value || []).map(renderBlockExtras));
}