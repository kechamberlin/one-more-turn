"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _loadGoogleMapsApi = _interopRequireDefault(require("./loadGoogleMapsApi"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class GoogleMapsLoadProxy extends _react.default.Component {
  constructor(props) {
    super(props);
    this.state = {
      loading: true,
      error: null
    };
  }

  componentDidMount() {
    (0, _loadGoogleMapsApi.default)(this.props).then(api => this.setState({
      loading: false,
      api
    })).catch(err => this.setState({
      error: err
    }));
  }

  render() {
    var _this$state = this.state,
        error = _this$state.error,
        loading = _this$state.loading,
        api = _this$state.api;

    if (error) {
      return /*#__PURE__*/_react.default.createElement("div", null, "Load error: ", error.stack);
    }

    if (loading) {
      return /*#__PURE__*/_react.default.createElement("div", null, "Loading Google Maps API");
    }

    var GeopointSelect = this.props.component;
    return /*#__PURE__*/_react.default.createElement(GeopointSelect, _extends({}, this.props, {
      api: api
    }));
  }

}

_defineProperty(GoogleMapsLoadProxy, "propTypes", {
  component: _propTypes.default.func.isRequired
});

var _default = GoogleMapsLoadProxy;
exports.default = _default;