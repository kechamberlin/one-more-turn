"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _googleMapsInput = _interopRequireDefault(require("config:@sanity/google-maps-input"));

var _default2 = _interopRequireDefault(require("part:@sanity/components/buttons/default"));

var _default3 = _interopRequireDefault(require("part:@sanity/components/dialogs/default"));

var _default4 = _interopRequireDefault(require("part:@sanity/components/fieldsets/default"));

var _patchEvent = require("part:@sanity/form-builder/patch-event");

var _buttonGrid = _interopRequireDefault(require("part:@sanity/components/buttons/button-grid"));

var _editIcon = _interopRequireDefault(require("part:@sanity/base/edit-icon"));

var _GeopointInput = _interopRequireDefault(require("../styles/GeopointInput.css"));

var _GeopointSelect = _interopRequireDefault(require("./GeopointSelect"));

var _GoogleMapsLoadProxy = _interopRequireDefault(require("./GoogleMapsLoadProxy"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var getLocale = context => {
  var intl = context.intl || {};
  return intl.locale || typeof window !== 'undefined' && window.navigator.language || 'en';
};

var getStaticImageUrl = value => {
  var loc = "".concat(value.lat, ",").concat(value.lng);
  var params = {
    key: _googleMapsInput.default.apiKey,
    center: loc,
    markers: loc,
    zoom: 13,
    scale: 2,
    size: '640x300'
  };
  var qs = Object.keys(params).reduce((res, param) => {
    return res.concat("".concat(param, "=").concat(encodeURIComponent(params[param])));
  }, []);
  return "https://maps.googleapis.com/maps/api/staticmap?".concat(qs.join('&'));
};

class GeopointInput extends _react.default.Component {
  constructor() {
    super();

    _defineProperty(this, "handleChange", latLng => {
      var _this$props = this.props,
          type = _this$props.type,
          onChange = _this$props.onChange;
      onChange(_patchEvent.PatchEvent.from([(0, _patchEvent.setIfMissing)({
        _type: type.name
      }), (0, _patchEvent.set)(latLng.lat(), ['lat']), (0, _patchEvent.set)(latLng.lng(), ['lng'])]));
    });

    _defineProperty(this, "handleClear", () => {
      var onChange = this.props.onChange;
      onChange(_patchEvent.PatchEvent.from((0, _patchEvent.unset)()));
    });

    this.handleToggleModal = this.handleToggleModal.bind(this);
    this.handleCloseModal = this.handleCloseModal.bind(this);
    this.state = {
      modalOpen: false
    };
  }

  handleToggleModal() {
    this.setState(prevState => ({
      modalOpen: !prevState.modalOpen
    }));
  }

  handleCloseModal() {
    this.setState({
      modalOpen: false
    });
  }

  render() {
    var _this$props2 = this.props,
        value = _this$props2.value,
        type = _this$props2.type,
        markers = _this$props2.markers;

    if (!_googleMapsInput.default || !_googleMapsInput.default.apiKey) {
      return /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement("p", null, "The ", /*#__PURE__*/_react.default.createElement("a", {
        href: "https://sanity.io/docs/schema-types/geopoint-type"
      }, "Geopoint type"), " needs a Google Maps API key with access to:"), /*#__PURE__*/_react.default.createElement("ul", null, /*#__PURE__*/_react.default.createElement("li", null, "Google Maps JavaScript API"), /*#__PURE__*/_react.default.createElement("li", null, "Google Places API Web Service"), /*#__PURE__*/_react.default.createElement("li", null, "Google Static Maps API")), /*#__PURE__*/_react.default.createElement("p", null, "Please enter the API key with access to these services in", /*#__PURE__*/_react.default.createElement("code", {
        style: {
          whitespace: 'nowrap'
        }
      }, "`<project-root>/config/@sanity/google-maps-input.json`")));
    }

    return /*#__PURE__*/_react.default.createElement(_default4.default, {
      legend: type.title,
      description: type.description,
      className: _GeopointInput.default.root,
      markers: markers
    }, /*#__PURE__*/_react.default.createElement("div", null, value && /*#__PURE__*/_react.default.createElement("div", {
      className: _GeopointInput.default.map
    }, /*#__PURE__*/_react.default.createElement("img", {
      className: _GeopointInput.default.previewImage,
      src: getStaticImageUrl(value),
      alt: "Map location"
    })), /*#__PURE__*/_react.default.createElement("div", {
      className: _GeopointInput.default.functions
    }, /*#__PURE__*/_react.default.createElement(_buttonGrid.default, null, /*#__PURE__*/_react.default.createElement(_default2.default, {
      inverted: true,
      onClick: this.handleToggleModal,
      icon: value && _editIcon.default
    }, value ? 'Edit' : 'Set location'), value && /*#__PURE__*/_react.default.createElement(_default2.default, {
      color: "danger",
      inverted: true,
      type: "button",
      onClick: this.handleClear
    }, "Remove"))), this.state.modalOpen && /*#__PURE__*/_react.default.createElement(_default3.default, {
      title: "Place on map",
      onClose: this.handleCloseModal,
      onCloseClick: this.handleCloseModal,
      onOpen: this.handleOpenModal,
      message: "Select location by dragging the marker or search for a place",
      isOpen: this.state.modalOpen
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: _GeopointInput.default.dialogInner
    }, /*#__PURE__*/_react.default.createElement(_GoogleMapsLoadProxy.default, {
      value: value,
      apiKey: _googleMapsInput.default.apiKey,
      onChange: this.handleChange,
      defaultLocation: _googleMapsInput.default.defaultLocation,
      defaultZoom: _googleMapsInput.default.defaultZoom,
      locale: getLocale(this.context),
      component: _GeopointSelect.default
    })))));
  }

}

_defineProperty(GeopointInput, "propTypes", {
  onChange: _propTypes.default.func.isRequired,
  markers: _propTypes.default.arrayOf(_propTypes.default.shape({
    type: _propTypes.default.string
  })),
  value: _propTypes.default.shape({
    lat: _propTypes.default.number,
    lng: _propTypes.default.number
  }),
  type: _propTypes.default.shape({
    title: _propTypes.default.string.isRequired,
    description: _propTypes.default.string
  })
});

_defineProperty(GeopointInput, "defaultProps", {
  markers: []
});

_defineProperty(GeopointInput, "contextTypes", {
  intl: _propTypes.default.shape({
    locale: _propTypes.default.string
  })
});

var _default = GeopointInput;
exports.default = _default;